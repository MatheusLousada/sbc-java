package br.gov.sp.saobernardo.webservice.paradigma.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import br.gov.sp.saobernardo.webservice.paradigma.modelos.CategoriaModel;
import br.gov.sp.saobernardo.webservice.paradigma.modelos.LogDeRetornoDaGravacao;
import br.gov.sp.saobernardo.webservice.paradigma.modelos.ProdutoModel;
import br.gov.sp.saobernardo.webservice.paradigma.modelos.UnidadeDeMedidaModel;
import br.gov.sp.saobernardo.webservice.paradigma.service.builders.ProdutoBuilder;
import br.gov.sp.saobernardo.webservice.paradigma.service.builders.UnidadeDeMedidaBuilder;

@Ignore
public class ProdutoServiceTest {

	private static final int SOMENTE_UMA_OCORRENCIA_DE_PRODUTO = 1;
	private static final int NENHUMA_OCORRENCIA_DE_PRODUTO = 0;
	private ProdutoService sujeito;
	private ProdutoModel produto;

	@Before
	public void antes() {
		sujeito = new ProdutoService(WSDLs.WSDL_PRODUTO_PRODUCAO, 
				WSDLs.WSDL_UNIDADE_MEDIDA_PRODUCAO,
				WSDLs.WSDL_PRODUTO_X_UNIDADE_MEDIDA_PRODUCAO);
	}

	@Test
	public void deveGravarUmProduto() {
		produto = criaProdutoTeste();
		ProdutoModel produtoGravado = sujeito.grava(produto);
		LogDeRetornoDaGravacao log = produtoGravado.getLogDaGravacao();
		assertEquals("7K012010022", produtoGravado.getCodigo());
		assertNotEquals("", log.getData());
		assertNotEquals("", log.getDescricao());
		assertNotEquals("", log.getToken());
		assertTrue("Deve informar sucesso : " + log.getDescricao(),
				log.getDescricao().indexOf("executada com sucesso para a chave") > 0);

	}

	@Ignore("Não estão funcionando")
	@Test
	public void deveBuscarUmProdutoPorCodigo() {
		produto = criaProdutoTeste();
		List<ProdutoModel> retornados = sujeito.buscaProdutoPorCodigo(produto.getCodigo(), 0);
		assertEquals(SOMENTE_UMA_OCORRENCIA_DE_PRODUTO, retornados.size());
		String descricaoProduto = produto.getDescricao();
		ProdutoModel produtoRetornado = retornados.get(0);
		assertEquals("Deveria ter esta descricao: " + descricaoProduto, descricaoProduto,
				produtoRetornado.getDescricao());
	}

	/**
	 * Para este teste dar certo, sera necessario colocar um produto em contrato
	 * ou encontrar um
	 */
	@Test(expected = IndexOutOfBoundsException.class)
	public void testBuscaProdutoQueEstaEmContratoPorDescricao() {
		produto = criaProdutoTeste();
		List<ProdutoModel> retorno = sujeito.buscaProdutoEmContratoPorDescricao(produto.getDescricao(), "1", 0);
		String descricaoProduto = produto.getDescricao();
		ProdutoModel produtoRetornado = retorno.get(0);
		assertEquals("Deveria ter esta descricao: " + descricaoProduto, descricaoProduto,
				produtoRetornado.getDescricao());
	}

	@Test
	public void testBuscaProdutoQueNaoEstaEmContratoPorDescricao() {
		produto = criaProdutoTeste();
		List<ProdutoModel> retorno = sujeito.buscaProdutoEmContratoPorDescricao(produto.getDescricao(), "1", 0);
		assertEquals(NENHUMA_OCORRENCIA_DE_PRODUTO, retorno.size());
	}

	@Ignore("Paradigma nao esta funcionando corretamente")
	@Test
	public void deveRetornarUmProdutoPesquisadoNoWBC() {

		ProdutoModel produto2 = new ProdutoModel();
		produto2.setCodigoEmpresa("5A001010995");
		produto2.setDescricao("TESTE.");
		produto2.setCodigo("11749");
		/*
		 * UnidadeDeMedidaModel unidadeDeMedida = new UnidadeDeMedidaModel();
		 * unidadeDeMedida.setCodigo("01012");
		 * produto2.setUnidadeDeMedida(unidadeDeMedida);
		 */
		produto2.setUnidadesDeMedida(criaUnidadeDemedida("01012"));

		@SuppressWarnings("deprecation")
		ProdutoModel retornados = sujeito.buscaProduto(produto2.getCodigo());
		System.out.println("produto: " + retornados.getDescricao());
		assertEquals("Deve ser " + produto2.getDescricao(), produto2.getDescricao(), retornados.getDescricao());
	}

	@Ignore("Esta gerando SOAPFaultException.class")
	@Test
	public void deveRetornarUmProdutoPesquisadoPorCategoria() {
		@SuppressWarnings("deprecation")
		List<ProdutoModel> retorno = sujeito
				.buscaProdutoPorCategoria(ConstantesTest.CATEGORIA_7560_IMPRESSOS_NAO_OFICIAIS);
		assertNotNull(retorno);
	}

	@Ignore("Pesquisa nao está funcionando")
	@Test
	/** Esta gerando (expected = IndexOutOfBoundsException.class) */
	public void deveRetornarUmProdutoPesquisadoPelaDescricao() {

		/** Produto obtido no site do WBC */
		String descricaoExistenteNoSite = "BATERIA PARA TESTE DE CONTATO (PATCH TEST), CONTEN";
		String codigoDeProdutoExistenteNoSite = "7F061010256";

		/*
		 * produto = new ProdutoModel();
		 * produto.setCodigo(codigoDeProdutoExistenteNoSite);
		 * produto.setDescricao(descricaoExistenteNoSite);
		 */
		ProdutoBuilder pb = new ProdutoBuilder().comCodigo(codigoDeProdutoExistenteNoSite)
				.comDescricao(descricaoExistenteNoSite);
		ProdutoModel modelo = pb.build();

		List<ProdutoModel> produtos = sujeito.buscaProdutoPorDescricao(produto.getDescricao(), "0", 0);
		assertNotNull(produtos);
		boolean temAlgumProduto = produtos.size() > 0;
		assertTrue("Deve trazer pelo menos um produto: ", temAlgumProduto);
		assertEquals(modelo.getDescricao(), produtos.get(0).getDescricao());

	}

	private ProdutoModel criaProdutoTeste() {

		CategoriaModel categoria = new CategoriaModel();
		categoria.setCodigo("7160");
		
		ProdutoBuilder pb = new ProdutoBuilder().comCodigo("7K012010022")
				.comCategoria(categoria).comDescricao("#ARMARIO ALTO CONFECCIONADO  EM MADEIRA COM  AS SE").comDetalhe("#ARMARIO ALTO CONFECCIONADO  EM MADEIRA COM  AS SE GUINTES   MEDIDAS: 2,10X0,80X0,45M, COM  CORPO  DE 18MM,  PERFIL  FITA DE BORDO E SOBRE TAMPO DE 18MM PERFIL SOFT, COM 04 PRATELEIRAS, COM 01 DIVISAO NO MEIO E COM 02 FECHADURAS, COR A SER DEFINIDA **GARANTIA MINIMA DE 12(DOZE) MESES** A : DECLARAR MARCA, REFERENCIA E PRAZO DE  GARANTIA NO CAMPO APROPRIADO PARA DECLARACAO DE MARCA. B : APRESENTAR CATALOGO CASO O PRODUTO OFERTADO NAO SEJA DA(S) MARCA(S) E/OU REFERENCIA(S)  INDICADAS NA  ESPECIFICACAO. EM  CASO  DE  LICITACAO, JUNTAMENTE COM A PROPOSTA E, EM CASO DE COTACAO ELETRONICA, NO PRAZO MAXIMO DE  02  DIAS  UTEIS CONTADOS A PARTIR DA SOLICITACAO. C : SERAO ANALISADOS OS CATALOGOS  QUE, ESTANDO  EM DESACORDO COM  AS  ESPECIFICACOES, ENSEJARAO  A DESCLASSIFICACAO DA  PROPOSTA/LANCE. DENTRE  AS CONSIDERADAS CLASSIFICADAS, O CRITERIO  ADOTADO SERA O DE MENOR PRECO.")
				.comUnidadeDeMedida(criaUnidadeDemedida("01270").get(0));

		return pb.build();
	}

	private List<UnidadeDeMedidaModel> criaUnidadeDemedida(String codigo) {
		List<UnidadeDeMedidaModel> lista = new ArrayList<UnidadeDeMedidaModel>();
		UnidadeDeMedidaBuilder umb = new UnidadeDeMedidaBuilder();
		lista.add(umb.comCodigo(codigo).build());

		return lista;
	}
}
